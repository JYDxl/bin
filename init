#!/usr/bin/ruby

require 'socket'
require 'etc'
require 'set'

$set_app = Set[
:mysql, :mysql_cluster,
:mariadb, :mariadb_cluster,
:postgresql, :postgresql_repmgr, :postgresql_cluster,
:rabbitmq, :rabbitmq_cluster,
:redis, :redis_sentinel, :redis_cluster,
:mongodb, :mongodb_cluster,
:elasticsearch, :elasticsearch_cluster,
:clickhouse, :clickhouse_cluster,
:flink_cluster,
:zookeeper, :zookeeper_cluster,
:kafka, :kafka_cluster,
:nacos, :nacos_cluster,
:logstash,
:neo4j,
:minio, :minio_cluster,
:hdfs_cluster,
:spark,
:nginx,
:zipkin,
:gitlab,
:sentinel,
:seata,
:emqx, :emqx_cluster,
:dolphinscheduler, :dolphinscheduler,
:chrome,
:alpine,
:alma,
:debian,
:starrocks,
:proxypool,
:xxljob,
:camunda,
:ruoyi
]

$set_opt = Set[:start, :stop]

def warn
  system "echo 'bin/init #{$set_app.to_a.join('|')} (--)#{$set_opt.to_a.join('|')}'"
  exit
end

# @param [String] cmd
def exec(cmd)
  # noinspection RubyResolve
  puts "\033[42m==>\033[0m \033[44m#{cmd}\033[0m"
  system cmd
end

class Component
  # @param [String] name
  # @return [Symbol]
  def parse_type(name)
    name.split('_')[0].to_sym
  end

  # @param [String] name
  # @return [Symbol]
  def parse_path(name)
    split  = name.split('_')
    prefix = "~/bin/src/"
    (split.size > 1 ? prefix + split[0] + '/' + name : prefix + name).to_sym
  end

  # @param [Symbol] name
  # @param [Symbol] opt
  def initialize(name, opt)
    @name = name
    @type = parse_type(name.to_s)
    @path = parse_path(name.to_s)
    @opt  = opt
  end

  def run_docker_compose
    case @opt
      when :start
        exec "docker-compose -p #{@name} -f #{@path}/docker-compose.yml up -d --build"
      when :stop
        exec "docker-compose -f #{@path}/docker-compose.yml stop"
      else
        warn
    end
  end

  def run
    pre_check_run
    run_docker_compose
  end

  def pre_check_run
    backend = exec 'docker network ls | grep backend'
    exec 'docker network create --subnet=172.18.0.0/16 backend' unless backend
  end
end

app = ARGV[0].to_s.to_sym
opt = (ARGV[1] || 'start').to_sym

warn unless ($set_app === app) && ($set_opt === opt)

component = Component.new(app, opt)
component.run
