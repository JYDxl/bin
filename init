#!/usr/bin/ruby

#sudo gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/
#sudo gem install colorize

require 'colorize'
require 'socket'
require 'etc'

def warn
  system "echo 'bin/init mysql|mariadb|postgresql-repmgr|postgresql-cluster|rabbitmq|redis-sentinel|redis-cluster|mongodb|elasticsearch|clickhouse|flink|kafka|nacos|logstash|cerebro|neo4j|minio|hdfs|spark|nginx|zipkin|gitlab|canal|sentinel|seata|chrome|alpine|idea|goland|pycharm|env  start(default)|stop'"
end

def memsize
  if RUBY_PLATFORM.match?(/^.*darwin.*$/)
    return Float(%x(sysctl hw.memsize | awk '{print $2 / 1024 / 1024 / 1024}')).ceil
  end

  if RUBY_PLATFORM.match?(/^.*linux.*$/)
    return Float(%x(vmstat -s | head -1 | awk '{print $1 / 1024 / 1024}')).ceil
  end

  exec 'unknown os'
  exit
end

# TODO jenkins

def exec(cmd)
  #noinspection RubyResolve
  puts "#{"==>".blue.bold} #{cmd.red.bold}"
  system cmd
end

def exec_path(opt, path, cmd = nil)
  case opt
    when 'start'
      exec cmd || "docker-compose -f #{path}/docker-compose.yml up -d"
    when 'stop'
      exec "docker-compose -f #{path}/docker-compose.yml stop"
    else
      warn
  end
end

#noinspection RubyNilAnalysis
ip  = Socket.ip_address_list.detect { |x| x.ipv4_private? }.ip_address
num = Etc.nprocessors
mem = memsize / 4
app = ARGV[0]
opt = ARGV[1] || 'start'
warn && exit unless app

case app
  when 'canal'
    exec 'docker build -t canal-server ~/bin/src/canal/'
    exec 'docker rm -f canal-server'
    exec "docker run -d --net backend --name canal-server -p 11111:11111 -v /opt/volumes/extra:/extra canal-server"
  when 'mariadb'
    exec_path opt, "~/bin/src/mariadb/mariadb-cluster"
  when 'postgresql-repmgr'
    exec_path opt, "~/bin/src/postgresql/postgresql-repmgr"
  when 'postgresql-cluster'
    exec_path opt, "~/bin/src/postgresql/postgresql-cluster"
  when 'rabbitmq'
    exec_path opt, "~/bin/src/rabbitmq/rabbitmq-cluster"
  when 'neo4j'
    exec_path opt, "~/bin/src/neo4j"
  when 'mysql'
    exec_path opt, "~/bin/src/mysql/mysql-cluster"
  when 'redis-sentinel'
    exec_path opt, "~/bin/src/redis/redis-sentinel"
  when 'redis-cluster'
    exec_path opt, "~/bin/src/redis/redis-cluster"
  when 'mongodb'
    exec_path opt, "~/bin/src/mongodb/mongodb-cluster"
  when 'elasticsearch'
    exec_path opt, "~/bin/src/elasticsearch/elasticsearch-cluster"
  when 'logstash'
    exec_path opt, "~/bin/src/logstash"
  when 'cerebro'
    exec_path opt, "~/bin/src/cerebro"
  when 'clickhouse'
    exec_path opt, "~/bin/src/clickhouse/clickhouse-cluster"
  when 'flink'
    path = "~/bin/src/flink/flink-cluster"
    exec_path opt, path, "NUM=#{num} MEM=#{mem} docker-compose -f #{path}/docker-compose.yml up -d"
  when 'spark'
    path = "~/bin/src/spark"
    exec_path opt, path, "NUM=#{num} MEM=#{mem} docker-compose -f #{path}/docker-compose.yml up -d"
  when 'kafka'
    path = "~/bin/src/kafka/kafka-cluster"
    exec_path opt, path, "IP=#{ip} docker-compose -f #{path}/docker-compose.yml up -d"
  when 'nacos'
    exec_path opt, "~/bin/src/nacos/nacos-cluster"
  when 'zipkin'
    exec 'docker build -t zipkin-server ~/bin/src/zipkin/'
    exec 'docker rm -f zipkin-server'
    exec 'docker run -d --net backend --name zipkin-server -p 9411:9411 zipkin-server --link rabbitmq'
  when 'sentinel'
    exec 'docker build -t sentinel-server ~/bin/src/sentinel/'
    exec 'docker rm -f sentinel-server'
    exec 'docker run -d --net host    --name sentinel-server -v /etc/localtime:/etc/localtime -v /opt/volumes/extra:/extra sentinel-server'
  when 'nginx'
    exec_path opt, "~/bin/src/nginx"
  when 'minio'
    exec_path opt, "~/bin/src/minio"
  when 'gitlab'
    exec_path opt, "~/bin/src/gitlab"
  when 'hdfs'
    exec_path opt, "~/bin/src/hdfs"
  when 'chrome'
    exec_path opt, "~/bin/src/chrome"
  when 'alpine'
    exec_path opt, "~/bin/src/alpine"
  when 'idea'
    exec_path opt, "~/bin/src/JetBrains-idea"
  when 'goland'
    exec_path opt, "~/bin/src/JetBrains-goland"
  when 'pycharm'
    exec_path opt, "~/bin/src/JetBrains-pycharm"
  when 'seata'
    exec "docker build -t seata-server --build-arg IP='#{ip}' ~/bin/src/seata/"
    exec 'docker rm -f seata-server'
    exec 'docker run -d --net backend --name seata-server -p 8091:8091 -v /etc/localtime:/etc/localtime -v /opt/volumes/extra:/extra seata-server'
  when 'env'
    exec 'docker network create backend'
  else
    warn
end
