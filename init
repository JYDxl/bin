#!/usr/bin/ruby

# gem update --system
# gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/
# gem install colorize

require 'colorize'

def warn
  system "echo 'bin/init mysql|mariadb|postgresql|rabbitmq|redis|mongodb|nacos|zipkin|sentinel|seata|nginx|alpine|ubuntu|debian|arch|java|env'"
end
# TODO jenkins nginx

def exec(cmd)
  #noinspection RubyResolve
  puts "#{"==>".blue.bold} #{cmd.red.bold}"
  system cmd
end

app = ARGV[0]
warn && exit unless app

case app
  when 'mysql'
    exec 'docker build -t mysql-server ~/bin/dockerfile/mysql/'
    exec 'docker rm -f mysql-server'
    exec "docker run -d --net backend --name mysql-server -p 3306:3306 -v ~/volume/mysql:/var/lib/mysql mysql-server:latest --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --lower_case_table_names=1 --default-time_zone='+8:00'"
  when 'mariadb'
    exec 'docker build -t mariadb-server ~/bin/dockerfile/mariadb/'
    exec 'docker rm -f mariadb-server'
    exec "docker run -d --net backend --name mariadb-server -p 3307:3306 -v ~/volume/maria:/var/lib/mysql mariadb-server:latest --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --lower_case_table_names=1 --default-time_zone='+8:00'"
  when 'postgresql'
    exec 'docker build -t postgresql-server ~/bin/dockerfile/postgresql/'
    exec 'docker rm -f postgresql-server'
    exec 'docker run -d --net backend --name postgresql-server -p 5432:5432 -v ~/volume/pgdata:/var/lib/postgresql/data postgresql-server:latest'
  when 'rabbitmq'
    exec 'docker build -t rabbitmq-server ~/bin/dockerfile/rabbitmq/'
    exec 'docker rm -f rabbitmq-server'
    exec 'docker run -d --net backend --name rabbitmq-server -p 15672:15672 -p 5672:5672 -v ~/volume/rabbitmq:/var/lib/rabbitmq --hostname rabbitmq-server rabbitmq-server:latest'
  when 'redis'
    exec 'docker build -t redis-server ~/bin/dockerfile/redis/'
    exec 'docker rm -f redis-server'
    exec 'docker run -d --net backend --name redis-server -p 6379:6379 -v ~/volume/redis:/data redis-server:latest --requirepass "XLrootJYD713"'
  when 'mongodb'
    exec 'docker build -t mongodb-server ~/bin/dockerfile/mongodb/'
    exec 'docker rm -f mongodb-server'
    exec 'docker run -d --net backend --name mongodb-server -p 27017:27017 -v ~/volume/mongo:/data/db mongodb-server:latest'
  when 'nacos'
    exec 'docker build -t nacos-server ~/bin/dockerfile/nacos/'
    exec 'docker rm -f nacos-server'
    exec 'docker run -d --net backend --name nacos-server -p 8848:8848 nacos-server:latest'
  when 'zipkin'
    exec 'docker build -t zipkin-server ~/bin/dockerfile/zipkin/'
    exec 'docker rm -f zipkin-server'
    exec 'docker run -d --net backend --name zipkin-server -p 9411:9411 zipkin-server:latest --link rabbitmq'
  when 'sentinel'
    exec 'docker build -t sentinel-server ~/bin/dockerfile/sentinel/'
    exec 'docker rm -f sentinel-server'
    exec 'docker run -d --net host    --name sentinel-server sentinel-server:latest'
  when 'nginx'
    exec 'docker build -t nginx-server ~/bin/dockerfile/nginx/'
    exec 'docker rm -f nginx-server'
    exec 'docker run -d --net backend --name nginx-server -p 80:80 -v ~/frontend:/frontend nginx-server:latest'
  when 'seata'
    exec 'docker build -t seata-server ~/bin/dockerfile/seata/'
    exec 'docker rm -f seata-server'
    exec 'docker run -d --net backend --name seata-server -p 8091:8091 seata-server:latest'
  when 'alpine'
    exec 'docker build -t alpine-os ~/bin/dockerfile/alpine/'
    exec 'docker rm -f alpine-os'
    exec 'docker run -d --net backend --name alpine-os -it alpine-os:latest sh'
  when 'ubuntu'
    exec 'docker build -t ubuntu-os ~/bin/dockerfile/ubuntu/'
    exec 'docker rm -f ubuntu-os'
    exec 'docker run -d --net backend --name ubuntu-os -it ubuntu-os:latest /bin/bash'
  when 'debian'
    exec 'docker build -t debian-os ~/bin/dockerfile/debian/'
    exec 'docker rm -f debian-os'
    exec 'docker run -d --net backend --name debian-os -it debian-os:latest /bin/bash'
  when 'arch'
    exec 'docker build -t arch-os ~/bin/dockerfile/arch/'
    exec 'docker rm -f arch-os'
    exec 'docker run -d --net backend --name arch-os -it arch-os:latest /bin/bash'
  when 'java'
    exec 'docker build -t jre-alpine ~/bin/dockerfile/java/'
  when 'env'
    exec 'docker network create backend'
  else
    warn
end
