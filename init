#!/usr/bin/ruby

#sudo gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/
#sudo gem install colorize

require 'colorize'
require 'socket'
require 'etc'
require 'set'

# TODO: app集合补全，以及添加对应的docker-compose
$set_app = Set[:mysql, :mysql_cluster, :mariadb, :mariadb_cluster, :postgresql, :postgresql_repmgr, :postgresql_cluster, :rabbitmq, :rabbitmq_cluster, :redis, :redis_sentinel, :redis_cluster, :mongodb, :mongodb_cluster, :elasticsearch, :elasticsearch_cluster, :clickhouse, :clickhouse_cluster, :flink, :flink_cluster, :kafka, :kafka_cluster, :nacos, :nacos_cluster, :logstash, :cerebro, :neo4j, :minio, :hdfs, :spark, :nginx, :zipkin, :gitlab, :canal, :sentinel, :seata, :chrome, :alpine, :alma, :debian, :ubuntu, :idea, :goland, :pycharm]
$set_opt = Set[:start, :stop]

def warn
  system "echo 'bin/init #{$set_app.to_a.join('|')} (--)#{$set_opt.to_a.join('|')}'"
  exit
end

#noinspection RubyNilAnalysis
def memsize
  if RUBY_PLATFORM.match?(/^.*darwin.*$/)
    return Float(%x(sysctl hw.memsize | awk '{print $2 / 1024 / 1024 / 1024}')).ceil
  end

  if RUBY_PLATFORM.match?(/^.*linux.*$/)
    return Float(%x(vmstat -s | head -1 | awk '{print $1 / 1024 / 1024}')).ceil
  end

  exec 'unknown os'
  exit
end

# TODO jenkins

def exec(cmd)
  #noinspection RubyResolve
  puts "#{"==>".blue.bold} #{cmd.red.bold}"
  system cmd
end

def exec_path(opt, path, cmd = nil)
  case opt
    when 'start'
      exec cmd || "docker-compose -f #{path}/docker-compose.yml up -d"
    when 'stop'
      exec "docker-compose -f #{path}/docker-compose.yml stop"
    else
      warn
  end
end

class Component
  def parse_type(name)
    name.split('_')[0].to_sym
  end

  def parse_path(name)
    split  = name.split('_')
    prefix = "~/bin/src/"
    split.size > 1 ? prefix + split[0] + '/' + name : prefix + name
  end

  def initialize(name, opt)
    @name = name
    @type = parse_type(name.to_s)
    @path = parse_path(name.to_s)
    @opt  = opt
  end

  def run_docker_compose
    args = get_args.map { |k, v| "#{k}=#{v}" }.join(" ")

    case @opt
      when :start
        exec "#{args} docker-compose -p #{@name} -f #{@path}/docker-compose.yml up -d"
      when :stop
        exec "#{args} docker-compose -f #{@path}/docker-compose.yml stop"
      else
        warn
    end
  end

  def run
    pre_check_run

    case @type
      when :canal
        exec 'docker build -t canal-server ~/bin/src/canal/'
        exec 'docker rm -f canal-server'
        exec "docker run -d --net backend --name canal-server -p 11111:11111 -v /opt/volumes/extra:/extra canal-server"
      when :seata
        exec "docker build -t seata-server --build-arg IP='#{ip}' ~/bin/src/seata/"
        exec 'docker rm -f seata-server'
        exec 'docker run -d --net backend --name seata-server -p 8091:8091 -v /etc/localtime:/etc/localtime -v /opt/volumes/extra:/extra seata-server'
      when :zipkin
        exec 'docker build -t zipkin-server ~/bin/src/zipkin/'
        exec 'docker rm -f zipkin-server'
        exec 'docker run -d --net backend --name zipkin-server -p 9411:9411 zipkin-server --link rabbitmq'
      when :sentinel
        exec 'docker build -t sentinel-server ~/bin/src/sentinel/'
        exec 'docker rm -f sentinel-server'
        exec 'docker run -d --net host    --name sentinel-server -v /etc/localtime:/etc/localtime -v /opt/volumes/extra:/extra sentinel-server'
      else
        run_docker_compose
    end
  end

  def get_args
    args = Hash.new

    case @type
      when :flink, :spark
        args[:NUM] = Etc.nprocessors
        args[:MEM] = memsize / 4
      when :kafka
        #noinspection RubyNilAnalysis
        args[:IP] = Socket.ip_address_list.detect { |x| x.ipv4_private? }.ip_address
      else
        # type code here
    end

    args
  end

  def pre_check_run
    backend = exec 'docker network ls | grep backend'
    exec 'docker network create backend' unless backend
  end
end

app = ARGV[0].to_s.to_sym
opt = (ARGV[1] || 'start').to_sym

warn unless ($set_app === app) && ($set_opt === opt)

component = Component.new(app, opt)
component.run
